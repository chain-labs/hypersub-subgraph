type SubscriptionTokenV1Factory @entity {
  id: String!
  address: Bytes!
  owner: Bytes!
  pendingOwner: Bytes # Pending owner can be null
  deployFee: BigInt!
  totalFeesWithdrawn: BigInt!
  hypersubs: [SubscriptionTokenV1!]! @derivedFrom(field: "factory")
  feeConfigs: [FeeConfig!] @derivedFrom(field: "factory")
}

type FeeConfig @entity {
  id: String!
  feeConfigId: BigInt!
  collector: Bytes!
  basisPoints: BigInt!
  creationBlockNumber: BigInt!
  creationTransactionHash: Bytes!
  factory: SubscriptionTokenV1Factory
}

type SubscriptionTokenV1 @entity {
  id: String!
  address: Bytes!
  MAX_REWARD_HALVINGS: BigInt!
  MAX_FEE_BIPS: BigInt!
  MAX_BIPS: BigInt!
  name: String!
  symbol: String!
  contractURI: String!
  tokenURI: String!
  owner: Bytes!
  isPaused: Boolean!
  pendingOwner: Bytes
  # @dev The cost of one second in denominated token (wei or other base unit)
  tokensPerSecond: BigInt!
  # @dev Minimum number of seconds to purchase. Also, this is the number of seconds until the reward multiplier is halved.
  minPurchaseSeconds: BigInt!
  # @dev The minimum number of tokens accepted for a time purchase
  minimumPurchase: BigInt!
  # @dev The token contract address, or 0x0 for native tokens
  token: Bytes!
  # @dev Flag which determines if the contract is erc20 denominated
  isErc20: Boolean!
  # @dev The block timestamp of the contract deployment (used for reward halvings)
  deployBlockTime: BigInt!
  deployBlockNumber: BigInt!
  deployTrxHash: Bytes!
  totalWithdrawn: BigInt!
  subscriptions: [HypersubSubscription!] @derivedFrom(field: "hypersub")
  factory: SubscriptionTokenV1Factory!
}

type HypersubSubscription @entity {
  id: String!
  tokenId: BigInt!
  subscriber: Bytes!
  # @dev The number of seconds purchased
  secondsPurchased: BigInt!
  # @dev The number of seconds granted by the creator
  secondsGranted: BigInt!
  lastUpdateBlockNumber: BigInt!
  lastUpdateTrxHash: Bytes!
  expiresAt: BigInt!
  hypersub: SubscriptionTokenV1!
}
